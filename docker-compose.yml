# Use postgres/example user/password credentials
version: '3.1'

services: # The containers we are going to run
  app:
    build:
      context: ./backend
      dockerfile: Dockerfile 
    container_name: backend
    restart: unless-stopped
    # volumes:
    #   - ./dcc-azar:/app 
    ports:
      - "3000:3000" 
    networks:
      - app-network 
    depends_on: 
      - db 
    environment:
      DB_USERNAME: e0
      DB_PASSWORD: e0

  # app-front:
  #   build:
  #     context: ./frontend # The path in the machine that have the files, in this case root
  #     dockerfile: Dockerfile # The name of the Dockerfile definition
  #   container_name: frontend
  #   restart: unless-stopped
  #   # volumes:
  #   #   - ./dcc-azar-frontend:/app
  #   ports:
  #     - "8000:8000" # To expose the app to the machine localhost (machine-port:container:port)
  #   networks:
  #     - app-network   
  #   command: yarn run start  
  #   depends_on: # Build dependencies in case one containers needs another to be builded first
  #     - db # To build after the database
  #     - app
  #   environment:
  #     DB_USERNAME: e0
  #     DB_PASSWORD: e0

  script:
    build:
      context: ./script
      dockerfile: Dockerfile # The name of the Dockerfile definition
    container_name: script
    restart: unless-stopped
    # volumes:    
    #   - ./script:/app # To copy changes in the local machine to the container.
    networks:
      - app-network
    depends_on: # Build dependencies in case one containers needs another to be builded first
      - db # To build after the database
    environment:
      DB_USERNAME: e0
      DB_PASSWORD: e0

  db: # The database service
    image: postgis/postgis
    restart: always
    networks:
      - app-network # Connect to the network to be used by other containers (ej: the web server)
    environment: # all the enviroment variables defined in the container (see postgres official image docs https://hub.docker.com/_/postgres)
      POSTGRES_USER: e0
      POSTGRES_PASSWORD: e0
      POSTGRES_DB: e0
    ports:
      - "5432:5432" # Expose to the local machine, for example to use a db UI like pgAdmin, etc...
    
    volumes:
      # To persist the data in the database we have a volume that persist after container deletion
      # and copy the files from the container to the volume.
      - db-volume:/var/lib/postgresql/data 

networks: # All the networks that connects our containers
  app-network:
    driver: bridge

volumes: # All the named volumes needed to persist data after container deletion
  db-volume:
